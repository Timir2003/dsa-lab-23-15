import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import asyncpg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not API_TOKEN:
    logger.critical("–ù–µ –∑–∞–¥–∞–Ω API_TOKEN! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'port': os.getenv('DB_PORT'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'database': os.getenv('DB_NAME')
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class CurrencyStates(StatesGroup):
    waiting_for_currency_name = State()
    waiting_for_currency_rate = State()
    waiting_for_convert_currency = State()
    waiting_for_convert_amount = State()
    waiting_for_currency_to_delete = State()
    waiting_for_currency_to_update = State()
    waiting_for_new_currency_rate = State()

async def create_db_connection():
    return await asyncpg.connect(**DB_CONFIG)

async def init_db():
    conn = None
    try:
        conn = await create_db_connection()
        await conn.execute("SELECT 1 FROM currencies LIMIT 1")
        await conn.execute("SELECT 1 FROM admins LIMIT 1")
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {str(e)}")
        exit(1)
    finally:
        if conn:
            await conn.close()

async def is_admin(chat_id: str) -> bool:
    conn = None
    try:
        conn = await create_db_connection()
        return await conn.fetchval("SELECT 1 FROM admins WHERE chat_id = $1", str(chat_id)) is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")
        return False
    finally:
        if conn:
            await conn.close()

async def get_currencies():
    conn = None
    try:
        conn = await create_db_connection()
        records = await conn.fetch("SELECT currency_name, rate FROM currencies")
        return {record['currency_name']: record['rate'] for record in records}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª—é—Ç: {str(e)}")
        return {}
    finally:
        if conn:
            await conn.close()

async def add_currency(name: str, rate: float) -> bool:
    conn = None
    try:
        conn = await create_db_connection()
        await conn.execute("INSERT INTO currencies (currency_name, rate) VALUES ($1, $2)", name, rate)
        return True
    except asyncpg.UniqueViolationError:
        logger.warning(f"–í–∞–ª—é—Ç–∞ {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã: {str(e)}")
        return False
    finally:
        if conn:
            await conn.close()

async def delete_currency(name: str) -> bool:
    conn = None
    try:
        conn = await create_db_connection()
        return await conn.execute("DELETE FROM currencies WHERE currency_name = $1", name) != "DELETE 0"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã: {str(e)}")
        return False
    finally:
        if conn:
            await conn.close()

async def update_currency_rate(name: str, new_rate: float) -> bool:
    conn = None
    try:
        conn = await create_db_connection()
        return await conn.execute("UPDATE currencies SET rate = $1 WHERE currency_name = $2", new_rate, name) != "UPDATE 0"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {str(e)}")
        return False
    finally:
        if conn:
            await conn.close()

def get_manage_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É"),
        KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É"),
        KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")
    )
    builder.row(KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)

def get_dev_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î")],
            [KeyboardButton(text="–õ–æ–≥–∏ –±–æ—Ç–∞")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

async def set_commands_for_user(user_id: int):
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="get_currencies", description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç"),
        types.BotCommand(command="convert", description="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä—É–±–ª–∏"),
    ]
    if await is_admin(str(user_id)):
        commands.extend([
            types.BotCommand(command="manage_currency", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏ (–∞–¥–º–∏–Ω)"),
            types.BotCommand(command="dev_menu", description="–ú–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–∞–¥–º–∏–Ω)")
        ])
    await bot.set_my_commands(commands)

# ================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==================

@dp.message(Command('start'))
async def cmd_start(message: Message):
    await set_commands_for_user(message.from_user.id)
    if await is_admin(str(message.from_user.id)):
        await message.answer(
            "üí∞ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–∞–º–∏ (–∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º):\n"
            "/get_currencies - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç\n"
            "/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä—É–±–ª–∏\n"
            "/manage_currency - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏\n"
        )
    else:
        await message.answer(
            "üí∞ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–∞–º–∏:\n"
            "/get_currencies - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç\n"
            "/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä—É–±–ª–∏"
        )

@dp.message(Command('get_currencies'))
async def cmd_get_currencies(message: Message):
    try:
        currencies = await get_currencies()
        if not currencies:
            await message.answer("‚ÑπÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç")
            return
        await message.answer("üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n" +
            "\n".join(f"‚Ä¢ {c}: {r} RUB" for c, r in sorted(currencies.items())))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")

@dp.message(Command('convert'))
async def cmd_convert(message: Message, state: FSMContext):
    try:
        currencies = await get_currencies()
        if not currencies:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            return
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR).\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: {', '.join(currencies.keys())}")
        await state.set_state(CurrencyStates.waiting_for_convert_currency)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

@dp.message(CurrencyStates.waiting_for_convert_currency)
async def process_convert_currency(message: Message, state: FSMContext):
    currency = message.text.strip().upper()
    currencies = await get_currencies()
    if currency not in currencies:
        await message.answer(f"‚ùå –í–∞–ª—é—Ç–∞ '{currency}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: {', '.join(currencies.keys())}")
        return
    await state.update_data(currency=currency)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency} –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ä—É–±–ª–∏:")
    await state.set_state(CurrencyStates.waiting_for_convert_amount)

@dp.message(CurrencyStates.waiting_for_convert_amount)
async def process_convert_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.').strip())
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
            return
        data = await state.get_data()
        currency = data['currency']
        rate = (await get_currencies())[currency]
        result = amount * float(rate)
        await message.answer(f"üí± –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n{amount:.2f} {currency} = {result:.2f} RUB\n–ö—É—Ä—Å: 1 {currency} = {rate} RUB")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    finally:
        await state.clear()

# ================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==================

@dp.message(Command('manage_currency'))
async def cmd_manage_currency(message: Message, state: FSMContext):
    if not await is_admin(str(message.from_user.id)):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏:", reply_markup=get_manage_keyboard())

@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def add_currency_handler(message: Message, state: FSMContext):
    if not await is_admin(str(message.from_user.id)):
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(CurrencyStates.waiting_for_currency_name)

@dp.message(CurrencyStates.waiting_for_currency_name)
async def process_currency_name(message: Message, state: FSMContext):
    currency = message.text.upper()
    if currency in await get_currencies():
        await message.answer("–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await state.clear()
        return
    await state.update_data(currency_name=currency)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å {currency} –∫ —Ä—É–±–ª—é:")
    await state.set_state(CurrencyStates.waiting_for_currency_rate)

@dp.message(CurrencyStates.waiting_for_currency_rate)
async def process_currency_rate(message: Message, state: FSMContext):
    try:
        rate = float(message.text.replace(',', '.'))
        if rate <= 0:
            await message.answer("‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0!")
            return
        data = await state.get_data()
        await message.answer(f"‚úÖ –í–∞–ª—é—Ç–∞ {data['currency_name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            if await add_currency(data['currency_name'], rate) else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã")
    except ValueError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    finally:
        await state.clear()

@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def delete_currency_handler(message: Message, state: FSMContext):
    if not await is_admin(str(message.from_user.id)):
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(CurrencyStates.waiting_for_currency_to_delete)

@dp.message(CurrencyStates.waiting_for_currency_to_delete)
async def process_currency_to_delete(message: Message, state: FSMContext):
    currency = message.text.upper()
    await message.answer(f"‚úÖ –í–∞–ª—é—Ç–∞ {currency} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
        if await delete_currency(currency) else f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await state.clear()

@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")
async def update_currency_handler(message: Message, state: FSMContext):
    if not await is_admin(str(message.from_user.id)):
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(CurrencyStates.waiting_for_currency_to_update)

@dp.message(CurrencyStates.waiting_for_currency_to_update)
async def process_currency_to_update(message: Message, state: FSMContext):
    await state.update_data(currency_name=message.text.upper())
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å {message.text.upper()} –∫ —Ä—É–±–ª—é:")
    await state.set_state(CurrencyStates.waiting_for_new_currency_rate)

@dp.message(CurrencyStates.waiting_for_new_currency_rate)
async def process_new_currency_rate(message: Message, state: FSMContext):
    try:
        new_rate = float(message.text.replace(',', '.'))
        if new_rate <= 0:
            await message.answer("‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0!")
            return
        data = await state.get_data()
        currency = data['currency_name']
        await message.answer(f"‚úÖ –ö—É—Ä—Å {currency} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω"
            if await update_currency_rate(currency, new_rate) else f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except ValueError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    finally:
        await state.clear()

# ================== –û–ë–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================

@dp.message(lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================

async def main():
    await init_db()
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="get_currencies", description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç"),
        types.BotCommand(command="convert", description="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä—É–±–ª–∏"),
    ])
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())
