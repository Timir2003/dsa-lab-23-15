import os
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),  # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not API_TOKEN:
    logger.critical("–ù–µ –∑–∞–¥–∞–Ω API_TOKEN! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞–ª—é—Ç
currencies = {}


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class CurrencyStates(StatesGroup):
    waiting_for_currency_name = State()
    waiting_for_currency_rate = State()
    waiting_for_convert_currency = State()
    waiting_for_convert_amount = State()


@dp.message(Command('start'))
async def cmd_start(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer(
        "üí∞ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–∞–º–∏:\n"
        "/save_currency - –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å\n"
        "/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä—É–±–ª–∏\n"
        "/list_currencies - —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç"
    )


@dp.message(Command('list_currencies'))
async def cmd_list_currencies(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç")
    if not currencies:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–∞–ª—é—Ç")
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /save_currency")
        return

    currencies_list = "\n".join(f"‚Ä¢ {k}: {v} RUB" for k, v in currencies.items())
    logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç: {currencies}")
    await message.answer(f"üìä –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç:\n{currencies_list}")


@dp.message(Command('save_currency'))
async def cmd_save_currency(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD):")
    await state.set_state(CurrencyStates.waiting_for_currency_name)


@dp.message(CurrencyStates.waiting_for_currency_name)
async def process_currency_name(message: Message, state: FSMContext):
    currency = message.text.upper()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã: {currency}")
    await state.update_data(currency_name=currency)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å {currency} –∫ —Ä—É–±–ª—é:")
    await state.set_state(CurrencyStates.waiting_for_currency_rate)


@dp.message(CurrencyStates.waiting_for_currency_rate)
async def process_currency_rate(message: Message, state: FSMContext):
    try:
        rate = float(message.text.replace(',', '.'))
        if rate <= 0:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å: {message.text}")
            await message.answer("‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0!")
            return

        data = await state.get_data()
        currency = data['currency_name']
        currencies[currency] = rate
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–∞–ª—é—Ç–∞: {currency} = {rate}")
        await message.answer(f"‚úÖ –ö—É—Ä—Å {currency} = {rate} RUB —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        await state.clear()

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞: {message.text}. {str(e)}")
        await message.answer("üö´ –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


@dp.message(Command('convert'))
async def cmd_convert(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")
    if not currencies:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–∞–ª—é—Ç")
        await message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞–ª—é—Ç—É —á–µ—Ä–µ–∑ /save_currency")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    await state.set_state(CurrencyStates.waiting_for_convert_currency)


@dp.message(CurrencyStates.waiting_for_convert_currency)
async def process_convert_currency(message: Message, state: FSMContext):
    currency = message.text.upper()
    if currency not in currencies:
        logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–∞–ª—é—Ç–∞: {currency}")
        await message.answer(f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(currencies.keys())}")
        await state.clear()
        return

    await state.update_data(currency=currency)
    logger.debug(f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {currency}")
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency}:")
    await state.set_state(CurrencyStates.waiting_for_convert_amount)


@dp.message(CurrencyStates.waiting_for_convert_amount)
async def process_convert_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞: {message.text}")
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0!")
            return

        data = await state.get_data()
        currency = data['currency']
        rate = currencies[currency]
        result = amount * rate
        logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {amount} {currency} = {result} RUB")
        await message.answer(f"üí± {amount} {currency} = {result:.2f} RUB")
        await state.clear()

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã: {message.text}. {str(e)}")
        await message.answer("üö´ –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    asyncio.run(main())