import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import asyncpg
from datetime import datetime, timedelta
import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("finance_bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
DB_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'port': os.getenv('DB_PORT'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'database': os.getenv('DB_NAME')
}
CURRENCY_SERVICE_URL = os.getenv('CURRENCY_SERVICE_URL')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class RegistrationState(StatesGroup):
    waiting_for_name = State()


class AddOperationState(StatesGroup):
    waiting_for_type = State()
    waiting_for_amount = State()
    waiting_for_date = State()


class ReportState(StatesGroup):
    waiting_for_currency = State()
    waiting_for_period = State()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def create_db_connection():

    return await asyncpg.connect(**DB_CONFIG)

async def init_db():
    conn = None
    try:
        conn = await create_db_connection()
        await conn.execute("SELECT 1 FROM users LIMIT 1")
        await conn.execute("SELECT 1 FROM operations LIMIT 1")
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {str(e)}")
        exit(1)
    finally:
        if conn:
            await conn.close()


# –†–∞–±–æ—Ç—ã —Å API
async def get_exchange_rate(currency: str) -> float:
    if currency == 'RUB':
        return 1.0

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                    f"{CURRENCY_SERVICE_URL}/rate?currency={currency}",
                    timeout=3
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    return float(data['rate'])

                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status}")
                return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã: {str(e)}")
        return None


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"),
        KeyboardButton(text="üìä –û—Ç—á–µ—Ç—ã")
    )
    builder.row(
        KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    )
    return builder.as_markup(resize_keyboard=True)


def get_operation_type_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="–î–æ—Ö–æ–¥"),
        KeyboardButton(text="–†–∞—Å—Ö–æ–¥"),
        KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_currency_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="RUB"),
        KeyboardButton(text="USD"),
        KeyboardButton(text="EUR"),
        KeyboardButton(text="CNY"),
        KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
    )
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)


def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command('start'))
async def cmd_start(message: Message):
    conn = None
    try:
        conn = await create_db_connection()
        user_exists = await conn.fetchval(
            "SELECT 1 FROM users WHERE chat_id = $1",
            message.from_user.id
        )

        if not user_exists:
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Finance Bot!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register"
            )
        else:
            await message.answer(
                "üîÑ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã",
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if conn:
            await conn.close()


@dp.message(Command('register'))
async def cmd_register(message: Message, state: FSMContext):
    conn = None
    try:
        conn = await create_db_connection()
        user_exists = await conn.fetchval(
            "SELECT 1 FROM users WHERE chat_id = $1",
            message.from_user.id
        )

        if user_exists:
            await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return

        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(RegistrationState.waiting_for_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if conn:
            await conn.close()


@dp.message(RegistrationState.waiting_for_name)
async def process_registration_name(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
        return

    conn = None
    try:
        conn = await create_db_connection()
        await conn.execute(
            "INSERT INTO users (chat_id, name) VALUES ($1, $2)",
            message.from_user.id, message.text.strip()
        )
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, {message.text.strip()}!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤.",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if conn:
            await conn.close()
        await state.clear()


@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é")
async def add_operation_start(message: Message, state: FSMContext):
    conn = None
    try:
        conn = await create_db_connection()
        user_exists = await conn.fetchval(
            "SELECT 1 FROM users WHERE chat_id = $1",
            message.from_user.id
        )

        if not user_exists:
            await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register")
            return

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=get_operation_type_keyboard()
        )
        await state.set_state(AddOperationState.waiting_for_type)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if conn:
            await conn.close()


@dp.message(AddOperationState.waiting_for_type)
async def process_operation_type(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return

    if message.text not in ["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return

    await state.update_data(operation_type='income' if message.text == "–î–æ—Ö–æ–¥" else 'expense')
    await message.answer(
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AddOperationState.waiting_for_amount)


@dp.message(AddOperationState.waiting_for_amount)
async def process_operation_amount(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return

    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        await state.update_data(amount=amount)
        await message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è'",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è")],
                    [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(AddOperationState.waiting_for_date)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50)")


@dp.message(AddOperationState.waiting_for_date)
async def process_operation_date(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return

    operation_data = await state.get_data()
    conn = None

    try:
        if message.text == "–°–µ–≥–æ–¥–Ω—è":
            operation_date = datetime.now().date()  # –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        else:
            operation_date = datetime.strptime(message.text, "%d.%m.%Y").date()

        conn = await create_db_connection()
        await conn.execute(
            "INSERT INTO operations (chat_id, type_operation, sum, date) VALUES ($1, $2, $3, $4)",
            message.from_user.id,
            operation_data['operation_type'],
            operation_data['amount'],
            operation_date
        )

        operation_type = "–¥–æ—Ö–æ–¥" if operation_data['operation_type'] == 'income' else "—Ä–∞—Å—Ö–æ–¥"
        await message.answer(
            f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–¢–∏–ø: {operation_type}\n"
            f"–°—É–º–º–∞: {operation_data['amount']:.2f} RUB\n"
            f"–î–∞—Ç–∞: {operation_date.strftime('%d.%m.%Y')}",
            reply_markup=get_main_keyboard()
        )
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–°–µ–≥–æ–¥–Ω—è'")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if conn:
            await conn.close()
        await state.clear()


@dp.message(lambda message: message.text == "üìä –û—Ç—á–µ—Ç—ã")
async def reports_menu(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_currency_keyboard()
    )
    await state.set_state(ReportState.waiting_for_currency)


@dp.message(ReportState.waiting_for_currency)
async def process_report_currency(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return

    if message.text not in ["RUB", "USD", "EUR", "CNY"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return

    await state.update_data(currency=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞ —Å–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="–ó–∞ –Ω–µ–¥–µ–ª—é")],
                [KeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü"), KeyboardButton(text="–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è")],
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(ReportState.waiting_for_period)


@dp.message(ReportState.waiting_for_period)
async def process_report_period(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª
    period_mapping = {
        "–ó–∞ —Å–µ–≥–æ–¥–Ω—è": timedelta(days=1),
        "–ó–∞ –Ω–µ–¥–µ–ª—é": timedelta(weeks=1),
        "–ó–∞ –º–µ—Å—è—Ü": timedelta(days=30),
        "–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è": None
    }

    if message.text not in period_mapping:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return

    report_data = await state.get_data()
    currency = report_data['currency']
    conn = None

    try:
        conn = await create_db_connection()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã
        rate = 1.0
        if currency != 'RUB':
            rate = await get_exchange_rate(currency)
            if rate is None:
                await message.answer(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã. –û—Ç—á–µ—Ç –±—É–¥–µ—Ç –≤ RUB.",
                    reply_markup=get_main_keyboard()
                )
                currency = 'RUB'
                rate = 1.0

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
        if message.text == "–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è":
            operations = await conn.fetch(
                "SELECT type_operation, sum, date FROM operations "
                "WHERE chat_id = $1 ORDER BY date DESC",
                message.from_user.id
            )
        else:
            operations = await conn.fetch(
                "SELECT type_operation, sum, date FROM operations "
                "WHERE chat_id = $1 AND date >= (NOW() - $2::interval) "
                "ORDER BY date DESC",
                message.from_user.id,
                period_mapping[message.text]
            )

        if not operations:
            await message.answer(
                f"‚ÑπÔ∏è –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ({message.text.lower()})",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
        total_income = 0.0
        total_expense = 0.0
        report_lines = [f"üìä –û—Ç—á–µ—Ç –∑–∞ {message.text.lower()} ({currency}):\n"]

        for op in operations:
            amount = float(op['sum']) / rate
            if op['type_operation'] == 'income':
                total_income += amount
                prefix = "‚¨ÜÔ∏è"
            else:
                total_expense += amount
                prefix = "‚¨áÔ∏è"

            report_lines.append(
                f"{prefix} {op['date'].strftime('%d.%m.%Y')} - {amount:.2f} {currency}"
            )

        balance = total_income - total_expense
        report_lines.append(f"\nüíµ –í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {total_income:.2f} {currency}")
        report_lines.append(f"üí∏ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expense:.2f} {currency}")
        report_lines.append(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} {currency}")

        await message.answer("\n".join(report_lines), reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
    finally:
        if conn:
            await conn.close()
        await state.clear()


@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    help_text = (
        "üìö <b>–ü–æ–º–æ—â—å –ø–æ Finance Bot</b>\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é - –í–Ω–µ—Å—Ç–∏ –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)\n"
        "üìä –û—Ç—á–µ—Ç—ã - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ:\n"
        "1. –¢–∏–ø (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)\n"
        "2. –°—É–º–º—É\n"
        "3. –î–∞—Ç—É\n\n"
        "–û—Ç—á–µ—Ç—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö."
    )
    await message.answer(help_text, parse_mode='HTML')


@dp.message()
async def handle_unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help",
        reply_markup=get_main_keyboard()
    )


async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())